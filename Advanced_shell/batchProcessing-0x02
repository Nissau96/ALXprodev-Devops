#!/bin/bash

# batchProcessing-0x02
# Script to fetch data for multiple Pokémon with retry logic

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
ERROR_LOG="pokemon_errors.log"
DELAY_SECONDS=2
MAX_RETRIES=3

# Create directories if they don't exist
mkdir -p "$OUTPUT_DIR"

# Initialize error log
echo "Pokémon API Error Log - $(date)" > "$ERROR_LOG"

# Function to make API request with retries
fetch_pokemon_with_retry() {
    local pokemon=$1
    local attempt=0
    local success=0
    local http_code
    local response

    while [[ $attempt -lt $MAX_RETRIES && $success -eq 0 ]]; do
        attempt=$((attempt + 1))
        
        echo "Attempt $attempt for $pokemon..."
        response=$(curl -s -w "\n%{http_code}" "${API_BASE_URL}/${pokemon}")
        http_code=$(echo "$response" | tail -n1)
        content=$(echo "$response" | head -n -1)

        if [[ "$http_code" == 200 ]]; then
            success=1
            echo "$content" > "${OUTPUT_DIR}/${pokemon}.json"
            echo "✅ Successfully saved ${pokemon}.json"
        else
            echo "⚠️ Attempt $attempt failed (HTTP $http_code)"
            if [[ $attempt -lt $MAX_RETRIES ]]; then
                sleep "$DELAY_SECONDS"
            fi
        fi
    done

    if [[ $success -eq 0 ]]; then
        echo "❌ Failed to fetch $pokemon after $MAX_RETRIES attempts" | tee -a "$ERROR_LOG"
        echo "HTTP $http_code - Response: $content" >> "$ERROR_LOG"
        return 1
    fi

    return 0
}

# Main processing loop
for pokemon in "${POKEMON_LIST[@]}"; do
    echo -e "\nProcessing $pokemon..."
    fetch_pokemon_with_retry "$pokemon"
    
    # Add delay between requests
    if [[ "$pokemon" != "${POKEMON_LIST[-1]}" ]]; then
        sleep "$DELAY_SECONDS"
    fi
done

echo -e "\nBatch processing complete!"
echo "Error log saved to: $ERROR_LOG"